
package DogPoundBreakout;
import java.util.Vector;
import java.util.Enumeration;

/**
 * COPYRIGHT (C) 2005 Rob Bauer.  All Rights Reserved.
 * Collect input from the command line, create a jumble, its permutations, 
 * and find matches based on the supplied input.  Then show the results.
 * <br> <br>
 * New in version 2:<br>
 * Removed permutation vector which caused heap errors when the jumble was 10 or 
 * more characters.  Rewrote supporting functions to handle the change.
 * @author Rob Bauer
 * @version 2.0  2005-09-11
 */


public class Main {

	/**
	 * Check the input parameters and make sure the proper number exist 
	 * (at least 2).
	 * <br>
	 * Find the jumble and then all of its permutations.
	 * <br>
	 * Then find the matches.  Once done, display the results.
	 * @param args command line arguments
	 */
	public static void main(String[] args) {
		// test the command line arguments
		String sMessage = validateInput(args);	
		
		// if there was a problem, the problem will be in the string sMessage
		if(sMessage != "") {				
			// there was a problem, let the user know
			System.out.println(sMessage);	
			return;									// exit out of the program
		}  //  end if(sMessage != "") 
		
		String sJumble = args[0];

		// large jumbles take awhile - to be nice, let the user know
		System.out.println("Processing jumble and finding matches...");	
		
		// setup the jumble and find and assign all its permutations
		Permutate permutate = new Permutate(args);		
		Vector vFound = permutate.getConfirmed();
		
		if(vFound.size() > 0) {						// any matches?
			System.out.println("The following names were found in \"" 
					+ sJumble + "\":");			// yup, let the user know

			// display the results
			displayVector(vFound);
			System.out.println("\nSuspects not found:");
			displayVector(permutate.getSuspect());
		}  // end if(vFound.size() > 0) {
		else
			System.out.println("The supplied names were not found in \"" 
					+ sJumble + "\".");				// none were found

		// display total permutations
		System.out.println("\nTotal permutations: " + permutate.size());		
	}  // end public static void main(String[] args) {

	
	
	/**
	 * Test an array of strings - make sure there's at least two strings in 
	 * the array. 
	 * @param vars an array of strings to test
	 * @return String containing the error message, if there were any errors.
	 */
	public static String validateInput(String[] vars) {
		String sMessage = "";
		if(vars.length < 2) 
			sMessage = "You must enter at least 2 parameters:\n" 
			+ "The fist parameter is the jumble and the second (and "
			+ "additionanal parameters) the dog suspects";
		return sMessage;
	}  // end public static String validateInput(String[] vars) {

	
	/**
	 * Prints the items in a given vector.
	 * @param vector to output
	 */
	public static void displayVector(Vector vector) {
		for(Enumeration e = vector.elements(); e.hasMoreElements();) {	
			System.out.println(e.nextElement());	
		}  // end for(Enumeration e = vName.elements(); e.hasMoreElements();) {
	}  // end public static void displayVector(Vector vector) {
	
}  // end public class Main {

