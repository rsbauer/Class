import javax.swing.*;
import java.awt.*;

public class DrawFloorPlan extends JPanel 
{
	private static final int STATUSBARHEIGHT = 12;
	private static final int BORDERPADDING = 20;		// border padding in pixels 
	private static final long serialVersionUID = 1L;
	private Dimension dimension;
	private String floorplan;
	private BinaryTree tree;
	
	public DrawFloorPlan()
	{
		setupPanel();
	}  // end public DrawFloorPlan()

	
	public DrawFloorPlan(String givenfloorplan)
	{
		setupPanel();
		floorplan = givenfloorplan;
		tree = new BinaryTree();
		tree.loadTree(floorplan);
	}  // end public DrawBinaryTree(String givenfloorplan)
		
	
	private void setupPanel()
	{
		setOpaque(true);	// handy for clearing the panel successfully (otherwise get artifacts) 
		setBackground(Color.WHITE);				// set the background color
	}  // end private void setupPanel()

	
	public void paintComponent(Graphics g)
	{
		super.paintComponent(g);		// call super's paint method
		Graphics2D g2 = (Graphics2D) g;
		// turn on anti-aliasing
	    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING, 
	    		RenderingHints.VALUE_ANTIALIAS_ON);

		dimension = getSize();

		drawFloorPlanFromTree(g2, tree);
		drawStatusBar(g2);
	}  // end public void paintComponent(Garphics g)
	
	
	private void drawStatusBar(Graphics2D g)
	{
		
		g.setColor(new Color(225, 235, 244));		// set the status bar color (light blue)
		// clear the bottom of the screen
		g.fillRect(0, dimension.height - STATUSBARHEIGHT, dimension.width, dimension.height);	
		g.setColor(Color.BLACK);									// color for the text
		// status bar text (let the user know the dimension and level used/entered
		String statusText = new String("Floorplan: " + floorplan);  //  + "In-order: " + inorderFloorplan);
		g.drawString(statusText, 2, dimension.height - 2);	// draw the string (place it at the bottom)		
	}  // end private void drawStatusBar()
	
	
	private void drawFloorPlanFromTree(Graphics2D g, BinaryTree tree)
	{
		Point topleft = new Point(BORDERPADDING, BORDERPADDING);
		Point boxdim = new Point(dimension.width - (BORDERPADDING * 2), dimension.height - (BORDERPADDING * 2) - STATUSBARHEIGHT);
		Point bottomright = new Point(topleft.x + boxdim.x, topleft.y + boxdim.y);
		
		g.drawRect(topleft.x, topleft.y, boxdim.x, boxdim.y);
		tree.drawFloorplan(g, topleft, bottomright);
	}  // end private void drawFloorPlanFromTree(BinaryTree tree)

}  // end public class DrawFloorPlan
