; Rob Bauer
; 20 March 98

; Program 4
; Procedure scans array and removes duplicates.  When done, procedure returns
; number of duplicates removed in AX.  Procedure expects the array's address
; and the number of items in the array.


.MODEL SMALL
.STACK 100H
.DATA

;        array1 db 1,2,2,4
        array1 db 4,1,6,4,6,3,6
        array1_size dw ($-array1)
;        array1_size dw ($-array1)/2

.CODE
        MAIN PROC
                                ; Initialize DS register
        MOV  AX,@DATA           ; Grab data segment address
        MOV  DS,AX              ; Store data segment in DS

        XOR AX,AX
        MOV AX,ARRAY1_SIZE      ; store array size
        PUSH AX                 ; toss array size on stack
        LEA AX,ARRAY1           ; store address in AX
        PUSH AX                 ; toss onto stack

        CALL ELIM               ; eliminate duplicates

        CALL SHOWSTUFF          ; show AX and array

        MOV  AX,4C00H           ; Initialize AX register
        INT  21H                ; Tell DOS program is complete and return to
                                ; system
        MAIN ENDP


        SHOWSTUFF PROC

        LEA BX,ARRAY1
        MOV CX,AX
        ADD CX,'0'
        MOV AH,2
        MOV DL,CL
        INT 21H

        SUB CX,'0'
        MOV SI,0

    THELOOP:
        MOV DL,[BX+SI]
        ADD DL,'0'
        INT 21H
        ADD SI,1
        LOOP THELOOP

        RET
        SHOWSTUFF ENDP

;----------------------------------------------------------------------------
        ELIM PROC
        ; Eliminate all duplicates and return in AX the total removed

        NUM EQU <WORD PTR [BP+6]>

        PUSH BP                 ; store current register values on stack
        MOV BP,SP               ; set base pointer to current stack pointer

        PUSH BX
        PUSH CX
        PUSH DX
        PUSH SI
        PUSH DI


;-- Test if array has only 0 or 1 elements ----------------------------------
        MOV CX,[BP+6]          ; Grab off stack the size of array
        DEC CX                  ; Want items-1 iterations
        JLE DONE                ; Check if size is <=0 = items <= 2 -> done
;-- End Test if array has only 0 or 1 elements ------------------------------


;        MOV CX,NUM
        ADD CX,'0'
        MOV AH,2
        MOV DL,CL
        INT 21H
 
        MOV BX,[BP+4]           ; point to base of array
        MOV SI,0
        MOV DI,0



    LOOP_ONE:
;    PUSH CX
;    MOV CX,[BP+4]
;    MOV CX,NUM
;    INC DI
    INC SI

        LOOP_TWO:
;                PUSH CX
;                MOV CX,NUM

                MOV DX,[BX+DI]
                CMP DX,[BX+SI]
                JE EQUAL

        CONTINUE:
                INC SI
                CMP SI,NUM
                JL LOOP_TWO
;                POP CX
;                LOOP LOOP_TWO


;    POP CX
;    LOOP LOOP_ONE
    CMP DI,NUM
    JL LOOP_ONE
    JMP DONE

    EQUAL:

;        CMP DI,SI
;        JE CONTINUE

;        PUSH CX
        PUSH AX
        PUSH SI

;                SUB CX,SI
                LOOP_THREE:

                        MOV AX,[BX+SI]
                        MOV [BX+SI+1],AX
                        INC SI

                CMP SI,NUM
                JL LOOP_THREE

;               LOOP LOOP_THREE
;                MOV CX,[BP+16]
;                DEC CX
;                MOV [BP+16],CX
                SUB NUM,1

        POP SI
        POP AX
;        POP CX
;        JMP CONTINUE
;        JMP LOOP_TWO


    DONE:

        MOV AX,NUM
;        MOV BX,[BP+2]               ; point to base of array

        POP DI                  ; restore register values
        POP SI                  
        POP DX
        POP CX                  
        POP BX
        POP BP
        RET 4                   ; pop 4 bytes (function call info) & return

        ELIM ENDP
;----------------------------------------------------------------------------
END MAIN
